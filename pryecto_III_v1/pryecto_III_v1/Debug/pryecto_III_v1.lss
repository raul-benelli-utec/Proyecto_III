
pryecto_III_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000a9e  00000b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  0080015a  0080015a  00000b8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011bd  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000865  00000000  00000000  00001ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095c  00000000  00000000  00002746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083c  00000000  00000000  0000340c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000930  00000000  00000000  00003c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e5       	ldi	r26, 0x5A	; 90
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3d       	cpi	r26, 0xD1	; 209
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 10 03 	call	0x620	; 0x620 <main>
  9e:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Obj_fail>:
			comando_recibido[n]=str[n];
			n++;
		}
		comando_recibido[n]='\0';
		flag=0;
		estadoActual_maq_str=EV_COMANDO;
  a6:	08 95       	ret

000000a8 <Obj_mov>:
  a8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <soltar_obj>
  ac:	88 23       	and	r24, r24
  ae:	19 f0       	breq	.+6      	; 0xb6 <Obj_mov+0xe>
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
  b6:	08 95       	ret

000000b8 <Efect_on>:
  b8:	08 95       	ret

000000ba <USART_Init>:
	EIMSK=0b00000001;//habilita interrupcion 0
};
void USART_Init(unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//Enable receiver and transmitter */
	UCSR0B =(1<< RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  c2:	88 e9       	ldi	r24, 0x98	; 152
  c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C |= (3<<UCSZ00);
  c8:	e2 ec       	ldi	r30, 0xC2	; 194
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	86 60       	ori	r24, 0x06	; 6
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <configuracion_inicial>:
}

//configuracion
void configuracion_inicial(){
	//fast pwm
	DDRB |= ( 1<< PORTB1 );  // Configuramos el PB1 como salida.
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0; // Reiniciamos el contador inicial
  da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 42999; // Configuramos el periodo de la señal TOP
  e2:	87 ef       	ldi	r24, 0xF7	; 247
  e4:	97 ea       	ldi	r25, 0xA7	; 167
  e6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  ea:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	TCCR1A =  (1 << COM1A1) | (0 << COM1A0) ; // Ponemos a 'bajo' el OCR1A cuando coincida el Compare Match
  ee:	e0 e8       	ldi	r30, 0x80	; 128
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM: TOP: ICR1
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // // Fast PWM: TOP: ICR1
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	88 e1       	ldi	r24, 0x18	; 24
 102:	80 83       	st	Z, r24
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Preesc = 8
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24

	OCR1A = 500; // ancho del pulso
 10a:	84 ef       	ldi	r24, 0xF4	; 244
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	USART_Init(MYUBRR);
 116:	87 e6       	ldi	r24, 0x67	; 103
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 5d 00 	call	0xba	; 0xba <USART_Init>
	//configuracion sensores presión-entradas e interrupcion en pd2
	DDRC = DDRC &~ (1<<sensor_d) &~ (1<<sensor_i);
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	8c 7f       	andi	r24, 0xFC	; 252
 122:	87 b9       	out	0x07, r24	; 7
	DDRD = DDRD &~ (1<<PORTD2);
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	8a b9       	out	0x0a, r24	; 10
	//configuracion  trigger, led y buzzer
	PORTD = PORTD | (1<<led);
 12a:	8b b1       	in	r24, 0x0b	; 11
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8b b9       	out	0x0b, r24	; 11
	PORTD = PORTD | (1<<buuz);
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	80 61       	ori	r24, 0x10	; 16
 134:	8b b9       	out	0x0b, r24	; 11
	DDRD = DDRD | (1<<trigger);
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8a b9       	out	0x0a, r24	; 10
	
	//configuracion timer 0
	TCCR0A = 0;
 13c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0b00000010;
 13e:	92 e0       	ldi	r25, 0x02	; 2
 140:	95 bd       	out	0x25, r25	; 37
	//TCNT0=0b00111010; //100us
	TCNT0=237;//10us
 142:	8d ee       	ldi	r24, 0xED	; 237
 144:	86 bd       	out	0x26, r24	; 38
	TIMSK0= 0b00000001;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	EICRA=0b00000010;//interrupcion 0 en falling
 14c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK=0b00000001;//habilita interrupcion 0
 150:	8d bb       	out	0x1d, r24	; 29
 152:	08 95       	ret

00000154 <abrir>:
	UCSR0C |= (3<<UCSZ00);
}

//Funciones
void abrir(){
	if (OCR1A>pulso_minimo & !(actuar%10)){
 154:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 158:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15c:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <actuar>
 160:	8d ec       	ldi	r24, 0xCD	; 205
 162:	28 9f       	mul	r18, r24
 164:	81 2d       	mov	r24, r1
 166:	11 24       	eor	r1, r1
 168:	86 95       	lsr	r24
 16a:	86 95       	lsr	r24
 16c:	86 95       	lsr	r24
 16e:	88 0f       	add	r24, r24
 170:	98 2f       	mov	r25, r24
 172:	99 0f       	add	r25, r25
 174:	99 0f       	add	r25, r25
 176:	98 0f       	add	r25, r24
 178:	31 e0       	ldi	r19, 0x01	; 1
 17a:	29 13       	cpse	r18, r25
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <pulso_minimo>
 184:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <pulso_minimo+0x1>
 188:	46 17       	cp	r20, r22
 18a:	57 07       	cpc	r21, r23
 18c:	08 f0       	brcs	.+2      	; 0x190 <abrir+0x3c>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	83 23       	and	r24, r19
 192:	49 f0       	breq	.+18     	; 0x1a6 <abrir+0x52>
		OCR1A--;
 194:	e8 e8       	ldi	r30, 0x88	; 136
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	91 83       	std	Z+1, r25	; 0x01
 1a0:	80 83       	st	Z, r24
		actuar=0;
 1a2:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <actuar>
	}
	actuar++;
 1a6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <actuar>
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <actuar>
 1b0:	08 95       	ret

000001b2 <cerrar>:
}
void cerrar(){
	if(OCR1A<pulso_max & !(actuar%10)){
 1b2:	60 91 88 00 	lds	r22, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1b6:	70 91 89 00 	lds	r23, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ba:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <actuar>
 1be:	8d ec       	ldi	r24, 0xCD	; 205
 1c0:	28 9f       	mul	r18, r24
 1c2:	81 2d       	mov	r24, r1
 1c4:	11 24       	eor	r1, r1
 1c6:	86 95       	lsr	r24
 1c8:	86 95       	lsr	r24
 1ca:	86 95       	lsr	r24
 1cc:	88 0f       	add	r24, r24
 1ce:	98 2f       	mov	r25, r24
 1d0:	99 0f       	add	r25, r25
 1d2:	99 0f       	add	r25, r25
 1d4:	98 0f       	add	r25, r24
 1d6:	31 e0       	ldi	r19, 0x01	; 1
 1d8:	29 13       	cpse	r18, r25
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <pulso_max>
 1e2:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <pulso_max+0x1>
 1e6:	64 17       	cp	r22, r20
 1e8:	75 07       	cpc	r23, r21
 1ea:	08 f0       	brcs	.+2      	; 0x1ee <cerrar+0x3c>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	83 23       	and	r24, r19
 1f0:	49 f0       	breq	.+18     	; 0x204 <cerrar+0x52>
		OCR1A++;
 1f2:	e8 e8       	ldi	r30, 0x88	; 136
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	91 81       	ldd	r25, Z+1	; 0x01
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	91 83       	std	Z+1, r25	; 0x01
 1fe:	80 83       	st	Z, r24
		actuar=0;
 200:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <actuar>
	}
	actuar++;
 204:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <actuar>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <actuar>
 20e:	08 95       	ret

00000210 <sensor_distancia>:
}
void sensor_distancia(){
	if (medir_distancia)
 210:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <medir_distancia>
 214:	88 23       	and	r24, r24
 216:	09 f4       	brne	.+2      	; 0x21a <sensor_distancia+0xa>
 218:	42 c0       	rjmp	.+132    	; 0x29e <sensor_distancia+0x8e>
	{
		t_eco=us-t_eco;
 21a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <us>
 21e:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <us+0x1>
 222:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <us+0x2>
 226:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <us+0x3>
 22a:	40 91 6b 01 	lds	r20, 0x016B	; 0x80016b <t_eco>
 22e:	50 91 6c 01 	lds	r21, 0x016C	; 0x80016c <t_eco+0x1>
 232:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <t_eco+0x2>
 236:	70 91 6e 01 	lds	r23, 0x016E	; 0x80016e <t_eco+0x3>
 23a:	84 1b       	sub	r24, r20
 23c:	95 0b       	sbc	r25, r21
 23e:	a6 0b       	sbc	r26, r22
 240:	b7 0b       	sbc	r27, r23
 242:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <t_eco>
 246:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <t_eco+0x1>
 24a:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <t_eco+0x2>
 24e:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <t_eco+0x3>
		if (t_eco<0)
 252:	bb 23       	and	r27, r27
 254:	64 f4       	brge	.+24     	; 0x26e <sensor_distancia+0x5e>
		{t_eco=+20000000000;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	98 ec       	ldi	r25, 0xC8	; 200
 25a:	a7 e1       	ldi	r26, 0x17	; 23
 25c:	b8 ea       	ldi	r27, 0xA8	; 168
 25e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <t_eco>
 262:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <t_eco+0x1>
 266:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <t_eco+0x2>
 26a:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <t_eco+0x3>
		}
		distancia=0.1715*t_eco;
 26e:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <t_eco>
 272:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <t_eco+0x1>
 276:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t_eco+0x2>
 27a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <t_eco+0x3>
 27e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__floatsisf>
 282:	22 eb       	ldi	r18, 0xB2	; 178
 284:	3d e9       	ldi	r19, 0x9D	; 157
 286:	4f e2       	ldi	r20, 0x2F	; 47
 288:	5e e3       	ldi	r21, 0x3E	; 62
 28a:	0e 94 b8 04 	call	0x970	; 0x970 <__mulsf3>
 28e:	0e 94 1c 04 	call	0x838	; 0x838 <__fixsfsi>
 292:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <distancia+0x1>
 296:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <distancia>
		medir_distancia=0;
 29a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <medir_distancia>
	}
	if (enviar_trigger)
 29e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <enviar_trigger>
 2a2:	88 23       	and	r24, r24
 2a4:	b1 f0       	breq	.+44     	; 0x2d2 <sensor_distancia+0xc2>
	{
		PORTD=PORTD & (1<<trigger);
 2a6:	8b b1       	in	r24, 0x0b	; 11
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	8b b9       	out	0x0b, r24	; 11
		t_eco=us;
 2ac:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <us>
 2b0:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <us+0x1>
 2b4:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <us+0x2>
 2b8:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <us+0x3>
 2bc:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <t_eco>
 2c0:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <t_eco+0x1>
 2c4:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <t_eco+0x2>
 2c8:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <t_eco+0x3>
		enviar_trigger=0;
 2cc:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <enviar_trigger>
 2d0:	08 95       	ret
		}else{
		PORTD=PORTD & ~(1<<trigger);
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	8b b9       	out	0x0b, r24	; 11
 2d8:	08 95       	ret

000002da <detectar_objeto>:
	}
}
int detectar_objeto(){
	return (PINC & ((1<<sensor_d) | (1<<sensor_i)));
 2da:	86 b1       	in	r24, 0x06	; 6
 2dc:	83 70       	andi	r24, 0x03	; 3
}
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	08 95       	ret

000002e2 <actualizar_t_obj>:
void actualizar_t_obj(){
	t_obj_on=us-t_inicio_obj_on;
 2e2:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <t_inicio_obj_on>
 2e6:	50 91 6a 01 	lds	r21, 0x016A	; 0x80016a <t_inicio_obj_on+0x1>
 2ea:	05 2e       	mov	r0, r21
 2ec:	00 0c       	add	r0, r0
 2ee:	66 0b       	sbc	r22, r22
 2f0:	77 0b       	sbc	r23, r23
 2f2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <us>
 2f6:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <us+0x1>
 2fa:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <us+0x2>
 2fe:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <us+0x3>
 302:	84 1b       	sub	r24, r20
 304:	95 0b       	sbc	r25, r21
 306:	a6 0b       	sbc	r26, r22
 308:	b7 0b       	sbc	r27, r23
 30a:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <t_obj_on>
 30e:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <t_obj_on+0x1>
 312:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <t_obj_on+0x2>
 316:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <t_obj_on+0x3>
	if (t_obj_on<0)
 31a:	bb 23       	and	r27, r27
 31c:	64 f4       	brge	.+24     	; 0x336 <actualizar_t_obj+0x54>
	{
		t_obj_on=+20000000000;
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	98 ec       	ldi	r25, 0xC8	; 200
 322:	a7 e1       	ldi	r26, 0x17	; 23
 324:	b8 ea       	ldi	r27, 0xA8	; 168
 326:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <t_obj_on>
 32a:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <t_obj_on+0x1>
 32e:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <t_obj_on+0x2>
 332:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <t_obj_on+0x3>
 336:	08 95       	ret

00000338 <Efect_restart>:
	};
void Efect_on(){
	
	};
void Efect_restart(){
	actualizar_t_obj();
 338:	0e 94 71 01 	call	0x2e2	; 0x2e2 <actualizar_t_obj>
		if (t_obj_on>3000000)
 33c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <t_obj_on>
 340:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <t_obj_on+0x1>
 344:	a0 91 63 01 	lds	r26, 0x0163	; 0x800163 <t_obj_on+0x2>
 348:	b0 91 64 01 	lds	r27, 0x0164	; 0x800164 <t_obj_on+0x3>
 34c:	81 3c       	cpi	r24, 0xC1	; 193
 34e:	96 4c       	sbci	r25, 0xC6	; 198
 350:	ad 42       	sbci	r26, 0x2D	; 45
 352:	b1 05       	cpc	r27, r1
 354:	14 f0       	brlt	.+4      	; 0x35a <Efect_restart+0x22>
		{
			estado_actual=ESPERA;
 356:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
 35a:	08 95       	ret

0000035c <USART_Receive>:
	}
}
unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 35c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 360:	88 23       	and	r24, r24
 362:	e4 f7       	brge	.-8      	; 0x35c <USART_Receive>
	/* Get and return received data from buffer */
	return UDR0;
 364:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 368:	08 95       	ret

0000036a <USART_Transmit>:

void USART_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
 36a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 36e:	95 ff       	sbrs	r25, 5
 370:	fc cf       	rjmp	.-8      	; 0x36a <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 372:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 376:	08 95       	ret

00000378 <enviar_msg_p_serie>:
}
void enviar_msg_p_serie(int mensaje){
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	ec 01       	movw	r28, r24
	cli();
 382:	f8 94       	cli
	int i=0;
 384:	00 e0       	ldi	r16, 0x00	; 0
 386:	10 e0       	ldi	r17, 0x00	; 0
	while(mensajes[mensaje][i]!='\0'){
 388:	04 c0       	rjmp	.+8      	; 0x392 <enviar_msg_p_serie+0x1a>
		USART_Transmit(mensajes[mensaje][i]);
 38a:	0e 94 b5 01 	call	0x36a	; 0x36a <USART_Transmit>
		i++;
 38e:	0f 5f       	subi	r16, 0xFF	; 255
 390:	1f 4f       	sbci	r17, 0xFF	; 255
	UDR0 = data;
}
void enviar_msg_p_serie(int mensaje){
	cli();
	int i=0;
	while(mensajes[mensaje][i]!='\0'){
 392:	fe 01       	movw	r30, r28
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	eb 57       	subi	r30, 0x7B	; 123
 39a:	fe 4f       	sbci	r31, 0xFE	; 254
 39c:	01 90       	ld	r0, Z+
 39e:	f0 81       	ld	r31, Z
 3a0:	e0 2d       	mov	r30, r0
 3a2:	e0 0f       	add	r30, r16
 3a4:	f1 1f       	adc	r31, r17
 3a6:	80 81       	ld	r24, Z
 3a8:	81 11       	cpse	r24, r1
 3aa:	ef cf       	rjmp	.-34     	; 0x38a <enviar_msg_p_serie+0x12>
		USART_Transmit(mensajes[mensaje][i]);
		i++;
	}
	USART_Transmit('\n');
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	0e 94 b5 01 	call	0x36a	; 0x36a <USART_Transmit>
	sei();
 3b2:	78 94       	sei
};
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <Espera>:

//Estados


void Espera(){
	if ((dist_min<distancia) & (distancia<dist_max) & (!obj_presente))
 3be:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <distancia>
 3c2:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <distancia+0x1>
 3c6:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <dist_min>
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	24 17       	cp	r18, r20
 3d0:	35 07       	cpc	r19, r21
 3d2:	0c f0       	brlt	.+2      	; 0x3d6 <Espera+0x18>
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <dist_max>
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	42 17       	cp	r20, r18
 3e0:	53 07       	cpc	r21, r19
 3e2:	0c f0       	brlt	.+2      	; 0x3e6 <Espera+0x28>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	89 23       	and	r24, r25
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <obj_presente>
 3ee:	21 11       	cpse	r18, r1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	88 23       	and	r24, r24
 3f4:	99 f0       	breq	.+38     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f6:	99 23       	and	r25, r25
 3f8:	89 f0       	breq	.+34     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	{
		estado_actual=OBJ_ON;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
		t_inicio_obj_on=us;
 400:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <us>
 404:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <us+0x1>
 408:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <t_inicio_obj_on+0x1>
 40c:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <t_inicio_obj_on>
		obj_presente=1;
 410:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <obj_presente>
		enviar_msg_p_serie(Msg_obj_on);
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 bc 01 	call	0x378	; 0x378 <enviar_msg_p_serie>
 41c:	08 95       	ret

0000041e <Obj_on>:
	}
}

void Obj_on(){
	if (distancia>dist_max)
 41e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <dist_max>
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <distancia>
 428:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <distancia+0x1>
 42c:	82 17       	cp	r24, r18
 42e:	93 07       	cpc	r25, r19
 430:	4c f4       	brge	.+18     	; 0x444 <Obj_on+0x26>
	{
		obj_presente=0;
 432:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <obj_presente>
		estado_actual=ESPERA;//o fail no sé
 436:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
		enviar_msg_p_serie(Msg_efect_restart);
 43a:	87 e0       	ldi	r24, 0x07	; 7
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 bc 01 	call	0x378	; 0x378 <enviar_msg_p_serie>
 442:	02 c0       	rjmp	.+4      	; 0x448 <Obj_on+0x2a>
	}else
	{
		actualizar_t_obj();
 444:	0e 94 71 01 	call	0x2e2	; 0x2e2 <actualizar_t_obj>
	}
	if (obj_presente & (4001000>t_obj_on) & (t_obj_on>4000000))
 448:	40 91 61 01 	lds	r20, 0x0161	; 0x800161 <t_obj_on>
 44c:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <t_obj_on+0x1>
 450:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <t_obj_on+0x2>
 454:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <t_obj_on+0x3>
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	48 3e       	cpi	r20, 0xE8	; 232
 45e:	8c e0       	ldi	r24, 0x0C	; 12
 460:	58 07       	cpc	r21, r24
 462:	8d e3       	ldi	r24, 0x3D	; 61
 464:	68 07       	cpc	r22, r24
 466:	71 05       	cpc	r23, r1
 468:	14 f0       	brlt	.+4      	; 0x46e <Obj_on+0x50>
 46a:	20 e0       	ldi	r18, 0x00	; 0
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <obj_presente>
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	28 23       	and	r18, r24
 476:	39 23       	and	r19, r25
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	41 30       	cpi	r20, 0x01	; 1
 47e:	59 40       	sbci	r21, 0x09	; 9
 480:	6d 43       	sbci	r22, 0x3D	; 61
 482:	71 05       	cpc	r23, r1
 484:	14 f4       	brge	.+4      	; 0x48a <Obj_on+0x6c>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	82 23       	and	r24, r18
 48c:	93 23       	and	r25, r19
 48e:	89 2b       	or	r24, r25
 490:	19 f0       	breq	.+6      	; 0x498 <Obj_on+0x7a>
	{
		//enviar_texto("pasaron 4 segundos");
		PORTD=PORTD & (1<<buuz);
 492:	8b b1       	in	r24, 0x0b	; 11
 494:	80 71       	andi	r24, 0x10	; 16
 496:	8b b9       	out	0x0b, r24	; 11
	}
	if (obj_presente & (5001000>t_obj_on) & (t_obj_on>5000000))
 498:	40 91 61 01 	lds	r20, 0x0161	; 0x800161 <t_obj_on>
 49c:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <t_obj_on+0x1>
 4a0:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <t_obj_on+0x2>
 4a4:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <t_obj_on+0x3>
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	48 32       	cpi	r20, 0x28	; 40
 4ae:	8f e4       	ldi	r24, 0x4F	; 79
 4b0:	58 07       	cpc	r21, r24
 4b2:	8c e4       	ldi	r24, 0x4C	; 76
 4b4:	68 07       	cpc	r22, r24
 4b6:	71 05       	cpc	r23, r1
 4b8:	14 f0       	brlt	.+4      	; 0x4be <Obj_on+0xa0>
 4ba:	20 e0       	ldi	r18, 0x00	; 0
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <obj_presente>
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	28 23       	and	r18, r24
 4c6:	39 23       	and	r19, r25
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	41 34       	cpi	r20, 0x41	; 65
 4ce:	5b 44       	sbci	r21, 0x4B	; 75
 4d0:	6c 44       	sbci	r22, 0x4C	; 76
 4d2:	71 05       	cpc	r23, r1
 4d4:	14 f4       	brge	.+4      	; 0x4da <Obj_on+0xbc>
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	82 23       	and	r24, r18
 4dc:	93 23       	and	r25, r19
 4de:	89 2b       	or	r24, r25
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <Obj_on+0xca>
	{
		//enviar_texto("pasaron 5 segundos");
		PORTD=PORTD & ~ (1<<buuz);
 4e2:	8b b1       	in	r24, 0x0b	; 11
 4e4:	8f 7e       	andi	r24, 0xEF	; 239
 4e6:	8b b9       	out	0x0b, r24	; 11
	}
	if (obj_presente & (t_obj_on>9000000))
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	40 91 61 01 	lds	r20, 0x0161	; 0x800161 <t_obj_on>
 4f0:	50 91 62 01 	lds	r21, 0x0162	; 0x800162 <t_obj_on+0x1>
 4f4:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <t_obj_on+0x2>
 4f8:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <t_obj_on+0x3>
 4fc:	41 34       	cpi	r20, 0x41	; 65
 4fe:	54 45       	sbci	r21, 0x54	; 84
 500:	69 48       	sbci	r22, 0x89	; 137
 502:	71 05       	cpc	r23, r1
 504:	14 f4       	brge	.+4      	; 0x50a <Obj_on+0xec>
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <obj_presente>
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	82 23       	and	r24, r18
 512:	93 23       	and	r25, r19
 514:	89 2b       	or	r24, r25
 516:	19 f0       	breq	.+6      	; 0x51e <Obj_on+0x100>
	{
		//enviar_texto("pasaron 9 segundos");
		estado_actual=CAPTURA_OBJ;
 518:	88 e0       	ldi	r24, 0x08	; 8
 51a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 51e:	08 95       	ret

00000520 <Obj_off>:
	}
};
void Obj_fail(){
	};
void Obj_off(){
	estado_actual=OBJ_OFF;
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
	abrir();
 526:	0e 94 aa 00 	call	0x154	; 0x154 <abrir>
	if (OCR1A==pulso_minimo)
 52a:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 52e:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 532:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pulso_minimo>
 536:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <pulso_minimo+0x1>
 53a:	28 17       	cp	r18, r24
 53c:	39 07       	cpc	r19, r25
 53e:	39 f4       	brne	.+14     	; 0x54e <Obj_off+0x2e>
	{
		enviar_msg_p_serie(Msg_obj_released);
 540:	85 e0       	ldi	r24, 0x05	; 5
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 bc 01 	call	0x378	; 0x378 <enviar_msg_p_serie>
		
		estado_actual=OBJ_RELEASED;
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 54e:	08 95       	ret

00000550 <Obj_cath>:
	{
		estado_actual=OBJ_OFF;
	}
	};
void Obj_cath(){
	estado_actual=OBJ_MOV;
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
	enviar_msg_p_serie(Msg_obj_mov);
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 bc 01 	call	0x378	; 0x378 <enviar_msg_p_serie>
 55e:	08 95       	ret

00000560 <Captura_obj>:
	};
void Captura_obj(){
	if (distancia>dist_max)
 560:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <dist_max>
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <distancia>
 56a:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <distancia+0x1>
 56e:	82 17       	cp	r24, r18
 570:	93 07       	cpc	r25, r19
 572:	54 f4       	brge	.+20     	; 0x588 <Captura_obj+0x28>
	{
		obj_presente=0;
 574:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <obj_presente>
		enviar_msg_p_serie(Msg_obj_fail);
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 bc 01 	call	0x378	; 0x378 <enviar_msg_p_serie>
		estado_actual=OBJ_FAIL;
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 586:	08 95       	ret
	}else if (detectar_objeto())
 588:	0e 94 6d 01 	call	0x2da	; 0x2da <detectar_objeto>
 58c:	89 2b       	or	r24, r25
 58e:	41 f0       	breq	.+16     	; 0x5a0 <Captura_obj+0x40>
	{
		enviar_msg_p_serie(Msg_obj_catch);
 590:	84 e0       	ldi	r24, 0x04	; 4
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 bc 01 	call	0x378	; 0x378 <enviar_msg_p_serie>
		estado_actual=OBJ_CATCH;
 598:	85 e0       	ldi	r24, 0x05	; 5
 59a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 59e:	08 95       	ret
	}else{
		cerrar();
 5a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <cerrar>
 5a4:	08 95       	ret

000005a6 <Obj_released>:
	}
	};
void Obj_released(){
	
	if (distancia>dist_max)
 5a6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <dist_max>
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <distancia>
 5b0:	30 91 56 01 	lds	r19, 0x0156	; 0x800156 <distancia+0x1>
 5b4:	82 17       	cp	r24, r18
 5b6:	93 07       	cpc	r25, r19
 5b8:	bc f4       	brge	.+46     	; 0x5e8 <Obj_released+0x42>
	{
		enviar_msg_p_serie(Msg_obj_off);
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 bc 01 	call	0x378	; 0x378 <enviar_msg_p_serie>
		t_obj_on=us;
 5c2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <us>
 5c6:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <us+0x1>
 5ca:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <us+0x2>
 5ce:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <us+0x3>
 5d2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <t_obj_on>
 5d6:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <t_obj_on+0x1>
 5da:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <t_obj_on+0x2>
 5de:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <t_obj_on+0x3>
		estado_actual=EFECT_RESTART;
 5e2:	89 e0       	ldi	r24, 0x09	; 9
 5e4:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
 5e8:	08 95       	ret

000005ea <enviar_texto>:
		i++;
	}
	USART_Transmit('\n');
	sei();
};
void enviar_texto(char text[]){
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	8c 01       	movw	r16, r24
	cli();
 5f4:	f8 94       	cli
	int n=0;
 5f6:	c0 e0       	ldi	r28, 0x00	; 0
 5f8:	d0 e0       	ldi	r29, 0x00	; 0
	while(text[n]!='\0'){
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <enviar_texto+0x18>
		USART_Transmit(text[n]);
 5fc:	0e 94 b5 01 	call	0x36a	; 0x36a <USART_Transmit>
		n++;
 600:	21 96       	adiw	r28, 0x01	; 1
	sei();
};
void enviar_texto(char text[]){
	cli();
	int n=0;
	while(text[n]!='\0'){
 602:	f8 01       	movw	r30, r16
 604:	ec 0f       	add	r30, r28
 606:	fd 1f       	adc	r31, r29
 608:	80 81       	ld	r24, Z
 60a:	81 11       	cpse	r24, r1
 60c:	f7 cf       	rjmp	.-18     	; 0x5fc <enviar_texto+0x12>
		USART_Transmit(text[n]);
		n++;
	};
	USART_Transmit('\n');
 60e:	8a e0       	ldi	r24, 0x0A	; 10
 610:	0e 94 b5 01 	call	0x36a	; 0x36a <USART_Transmit>
	sei();
 614:	78 94       	sei
};
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	1f 91       	pop	r17
 61c:	0f 91       	pop	r16
 61e:	08 95       	ret

00000620 <main>:
void abrir();



int main(void)
{
 620:	cf 93       	push	r28
 622:	df 93       	push	r29
 624:	cd b7       	in	r28, 0x3d	; 61
 626:	de b7       	in	r29, 0x3e	; 62
 628:	64 97       	sbiw	r28, 0x14	; 20
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
	mensajes[Msg_obj_on]=msg_obj_on;
 634:	e5 e8       	ldi	r30, 0x85	; 133
 636:	f1 e0       	ldi	r31, 0x01	; 1
 638:	87 e4       	ldi	r24, 0x47	; 71
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	91 83       	std	Z+1, r25	; 0x01
 63e:	80 83       	st	Z, r24
	mensajes[Msg_obj_off]=msg_obj_off;
 640:	86 e3       	ldi	r24, 0x36	; 54
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	95 83       	std	Z+5, r25	; 0x05
 646:	84 83       	std	Z+4, r24	; 0x04
	mensajes[Msg_obj_catch]=msg_obj_catch;
 648:	84 e2       	ldi	r24, 0x24	; 36
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	91 87       	std	Z+9, r25	; 0x09
 64e:	80 87       	std	Z+8, r24	; 0x08
	mensajes[Msg_obj_mov]=msg_obj_mov;
 650:	8e e2       	ldi	r24, 0x2E	; 46
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	97 83       	std	Z+7, r25	; 0x07
 656:	86 83       	std	Z+6, r24	; 0x06
	mensajes[Msg_obj_fail]=msg_obj_fail;
 658:	8e e3       	ldi	r24, 0x3E	; 62
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	93 83       	std	Z+3, r25	; 0x03
 65e:	82 83       	std	Z+2, r24	; 0x02
	mensajes[Msg_obj_released]=msg_obj_released;
 660:	87 e1       	ldi	r24, 0x17	; 23
 662:	91 e0       	ldi	r25, 0x01	; 1
 664:	93 87       	std	Z+11, r25	; 0x0b
 666:	82 87       	std	Z+10, r24	; 0x0a
	mensajes[Msg_efect_on]=msg_efect_on;
 668:	8e e0       	ldi	r24, 0x0E	; 14
 66a:	91 e0       	ldi	r25, 0x01	; 1
 66c:	95 87       	std	Z+13, r25	; 0x0d
 66e:	84 87       	std	Z+12, r24	; 0x0c
	mensajes[Msg_efect_restart]=msg_efect_restart;
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	97 87       	std	Z+15, r25	; 0x0f
 676:	86 87       	std	Z+14, r24	; 0x0e
	void (*vector_estados[total_estados])();
	vector_estados[ESPERA]=Espera;
 678:	8f ed       	ldi	r24, 0xDF	; 223
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	9a 83       	std	Y+2, r25	; 0x02
 67e:	89 83       	std	Y+1, r24	; 0x01
	vector_estados[OBJ_ON]=Obj_on;
 680:	8f e0       	ldi	r24, 0x0F	; 15
 682:	92 e0       	ldi	r25, 0x02	; 2
 684:	9c 83       	std	Y+4, r25	; 0x04
 686:	8b 83       	std	Y+3, r24	; 0x03
	vector_estados[OBJ_FAIL]=Obj_fail;
 688:	83 e5       	ldi	r24, 0x53	; 83
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	9e 83       	std	Y+6, r25	; 0x06
 68e:	8d 83       	std	Y+5, r24	; 0x05
	vector_estados[OBJ_OFF]=Obj_off;
 690:	80 e9       	ldi	r24, 0x90	; 144
 692:	92 e0       	ldi	r25, 0x02	; 2
 694:	98 87       	std	Y+8, r25	; 0x08
 696:	8f 83       	std	Y+7, r24	; 0x07
	vector_estados[OBJ_MOV]=Obj_mov;
 698:	84 e5       	ldi	r24, 0x54	; 84
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	9a 87       	std	Y+10, r25	; 0x0a
 69e:	89 87       	std	Y+9, r24	; 0x09
	vector_estados[OBJ_CATCH]=Obj_cath;
 6a0:	88 ea       	ldi	r24, 0xA8	; 168
 6a2:	92 e0       	ldi	r25, 0x02	; 2
 6a4:	9c 87       	std	Y+12, r25	; 0x0c
 6a6:	8b 87       	std	Y+11, r24	; 0x0b
	vector_estados[OBJ_RELEASED]=Obj_released;
 6a8:	83 ed       	ldi	r24, 0xD3	; 211
 6aa:	92 e0       	ldi	r25, 0x02	; 2
 6ac:	9e 87       	std	Y+14, r25	; 0x0e
 6ae:	8d 87       	std	Y+13, r24	; 0x0d
	vector_estados[EFECT_ON]=Efect_on;
 6b0:	8c e5       	ldi	r24, 0x5C	; 92
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	98 8b       	std	Y+16, r25	; 0x10
 6b6:	8f 87       	std	Y+15, r24	; 0x0f
	vector_estados[EFECT_RESTART]=Efect_restart;
 6b8:	8c e9       	ldi	r24, 0x9C	; 156
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	9c 8b       	std	Y+20, r25	; 0x14
 6be:	8b 8b       	std	Y+19, r24	; 0x13
	vector_estados[CAPTURA_OBJ]=Captura_obj;
 6c0:	80 eb       	ldi	r24, 0xB0	; 176
 6c2:	92 e0       	ldi	r25, 0x02	; 2
 6c4:	9a 8b       	std	Y+18, r25	; 0x12
 6c6:	89 8b       	std	Y+17, r24	; 0x11
	
	configuracion_inicial();
 6c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <configuracion_inicial>
	enviar_texto("a");
 6cc:	87 e5       	ldi	r24, 0x57	; 87
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <enviar_texto>
	sei();
 6d4:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		vector_estados[estado_actual]();
 6d6:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <__data_end>
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	ee 0f       	add	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	8c 0f       	add	r24, r28
 6e6:	9d 1f       	adc	r25, r29
 6e8:	e8 0f       	add	r30, r24
 6ea:	f9 1f       	adc	r31, r25
 6ec:	01 90       	ld	r0, Z+
 6ee:	f0 81       	ld	r31, Z
 6f0:	e0 2d       	mov	r30, r0
 6f2:	09 95       	icall
 6f4:	f0 cf       	rjmp	.-32     	; 0x6d6 <main+0xb6>

000006f6 <__vector_18>:
	sei();
};

//interrupciones
ISR (USART_RX_vect)
{
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	received_data = USART_Receive();
 718:	0e 94 ae 01 	call	0x35c	; 0x35c <USART_Receive>
 71c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <received_data>
	if (((received_data<='z') && (received_data>='$')) || (received_data=='\n'))
 720:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <received_data>
 724:	8b 37       	cpi	r24, 0x7B	; 123
 726:	20 f4       	brcc	.+8      	; 0x730 <__vector_18+0x3a>
 728:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <received_data>
 72c:	84 32       	cpi	r24, 0x24	; 36
 72e:	20 f4       	brcc	.+8      	; 0x738 <__vector_18+0x42>
 730:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <received_data>
 734:	8a 30       	cpi	r24, 0x0A	; 10
 736:	f9 f4       	brne	.+62     	; 0x776 <__vector_18+0x80>
	{
		if(received_data!='\n'){// && received_data!='\r'
 738:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <received_data>
 73c:	8a 30       	cpi	r24, 0x0A	; 10
 73e:	69 f0       	breq	.+26     	; 0x75a <__vector_18+0x64>
			str[i]=received_data;
 740:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <i>
 744:	e8 2f       	mov	r30, r24
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <received_data>
 74c:	eb 56       	subi	r30, 0x6B	; 107
 74e:	fe 4f       	sbci	r31, 0xFE	; 254
 750:	90 83       	st	Z, r25
			i++;
 752:	8f 5f       	subi	r24, 0xFF	; 255
 754:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <i>
 758:	0e c0       	rjmp	.+28     	; 0x776 <__vector_18+0x80>
			}else{
			str[i]='\0';
 75a:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <i>
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	eb 56       	subi	r30, 0x6B	; 107
 762:	fe 4f       	sbci	r31, 0xFE	; 254
 764:	10 82       	st	Z, r1
			i=0;
 766:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <i>
			flag = 1;
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <flag+0x1>
 772:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <flag>
		}
	}
}
 776:	ff 91       	pop	r31
 778:	ef 91       	pop	r30
 77a:	bf 91       	pop	r27
 77c:	af 91       	pop	r26
 77e:	9f 91       	pop	r25
 780:	8f 91       	pop	r24
 782:	7f 91       	pop	r23
 784:	6f 91       	pop	r22
 786:	5f 91       	pop	r21
 788:	4f 91       	pop	r20
 78a:	3f 91       	pop	r19
 78c:	2f 91       	pop	r18
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <__vector_16>:
ISR (TIMER0_OVF_vect)//10us
{
 798:	1f 92       	push	r1
 79a:	0f 92       	push	r0
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	8f 93       	push	r24
 7a4:	9f 93       	push	r25
 7a6:	af 93       	push	r26
 7a8:	bf 93       	push	r27
	TCNT0=239;
 7aa:	8f ee       	ldi	r24, 0xEF	; 239
 7ac:	86 bd       	out	0x26, r24	; 38
	us+=10;
 7ae:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <us>
 7b2:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <us+0x1>
 7b6:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <us+0x2>
 7ba:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <us+0x3>
 7be:	0a 96       	adiw	r24, 0x0a	; 10
 7c0:	a1 1d       	adc	r26, r1
 7c2:	b1 1d       	adc	r27, r1
 7c4:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <us>
 7c8:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <us+0x1>
 7cc:	a0 93 67 01 	sts	0x0167, r26	; 0x800167 <us+0x2>
 7d0:	b0 93 68 01 	sts	0x0168, r27	; 0x800168 <us+0x3>
	if (us>20000000000){
		us=0;
	}
};
 7d4:	bf 91       	pop	r27
 7d6:	af 91       	pop	r26
 7d8:	9f 91       	pop	r25
 7da:	8f 91       	pop	r24
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <__vector_1>:
ISR (INT0_vect){
 7e6:	1f 92       	push	r1
 7e8:	0f 92       	push	r0
 7ea:	0f b6       	in	r0, 0x3f	; 63
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	2f 93       	push	r18
 7f2:	3f 93       	push	r19
 7f4:	4f 93       	push	r20
 7f6:	5f 93       	push	r21
 7f8:	6f 93       	push	r22
 7fa:	7f 93       	push	r23
 7fc:	8f 93       	push	r24
 7fe:	9f 93       	push	r25
 800:	af 93       	push	r26
 802:	bf 93       	push	r27
 804:	ef 93       	push	r30
 806:	ff 93       	push	r31
	medir_distancia=1;
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <medir_distancia>
	enviar_trigger=1;
 80e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <enviar_trigger>
	sensor_distancia();
 812:	0e 94 08 01 	call	0x210	; 0x210 <sensor_distancia>
 816:	ff 91       	pop	r31
 818:	ef 91       	pop	r30
 81a:	bf 91       	pop	r27
 81c:	af 91       	pop	r26
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	7f 91       	pop	r23
 824:	6f 91       	pop	r22
 826:	5f 91       	pop	r21
 828:	4f 91       	pop	r20
 82a:	3f 91       	pop	r19
 82c:	2f 91       	pop	r18
 82e:	0f 90       	pop	r0
 830:	0f be       	out	0x3f, r0	; 63
 832:	0f 90       	pop	r0
 834:	1f 90       	pop	r1
 836:	18 95       	reti

00000838 <__fixsfsi>:
 838:	0e 94 23 04 	call	0x846	; 0x846 <__fixunssfsi>
 83c:	68 94       	set
 83e:	b1 11       	cpse	r27, r1
 840:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_szero>
 844:	08 95       	ret

00000846 <__fixunssfsi>:
 846:	0e 94 97 04 	call	0x92e	; 0x92e <__fp_splitA>
 84a:	88 f0       	brcs	.+34     	; 0x86e <__fixunssfsi+0x28>
 84c:	9f 57       	subi	r25, 0x7F	; 127
 84e:	98 f0       	brcs	.+38     	; 0x876 <__fixunssfsi+0x30>
 850:	b9 2f       	mov	r27, r25
 852:	99 27       	eor	r25, r25
 854:	b7 51       	subi	r27, 0x17	; 23
 856:	b0 f0       	brcs	.+44     	; 0x884 <__fixunssfsi+0x3e>
 858:	e1 f0       	breq	.+56     	; 0x892 <__fixunssfsi+0x4c>
 85a:	66 0f       	add	r22, r22
 85c:	77 1f       	adc	r23, r23
 85e:	88 1f       	adc	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	1a f0       	brmi	.+6      	; 0x86a <__fixunssfsi+0x24>
 864:	ba 95       	dec	r27
 866:	c9 f7       	brne	.-14     	; 0x85a <__fixunssfsi+0x14>
 868:	14 c0       	rjmp	.+40     	; 0x892 <__fixunssfsi+0x4c>
 86a:	b1 30       	cpi	r27, 0x01	; 1
 86c:	91 f0       	breq	.+36     	; 0x892 <__fixunssfsi+0x4c>
 86e:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_zero>
 872:	b1 e0       	ldi	r27, 0x01	; 1
 874:	08 95       	ret
 876:	0c 94 b1 04 	jmp	0x962	; 0x962 <__fp_zero>
 87a:	67 2f       	mov	r22, r23
 87c:	78 2f       	mov	r23, r24
 87e:	88 27       	eor	r24, r24
 880:	b8 5f       	subi	r27, 0xF8	; 248
 882:	39 f0       	breq	.+14     	; 0x892 <__fixunssfsi+0x4c>
 884:	b9 3f       	cpi	r27, 0xF9	; 249
 886:	cc f3       	brlt	.-14     	; 0x87a <__fixunssfsi+0x34>
 888:	86 95       	lsr	r24
 88a:	77 95       	ror	r23
 88c:	67 95       	ror	r22
 88e:	b3 95       	inc	r27
 890:	d9 f7       	brne	.-10     	; 0x888 <__fixunssfsi+0x42>
 892:	3e f4       	brtc	.+14     	; 0x8a2 <__fixunssfsi+0x5c>
 894:	90 95       	com	r25
 896:	80 95       	com	r24
 898:	70 95       	com	r23
 89a:	61 95       	neg	r22
 89c:	7f 4f       	sbci	r23, 0xFF	; 255
 89e:	8f 4f       	sbci	r24, 0xFF	; 255
 8a0:	9f 4f       	sbci	r25, 0xFF	; 255
 8a2:	08 95       	ret

000008a4 <__floatunsisf>:
 8a4:	e8 94       	clt
 8a6:	09 c0       	rjmp	.+18     	; 0x8ba <__floatsisf+0x12>

000008a8 <__floatsisf>:
 8a8:	97 fb       	bst	r25, 7
 8aa:	3e f4       	brtc	.+14     	; 0x8ba <__floatsisf+0x12>
 8ac:	90 95       	com	r25
 8ae:	80 95       	com	r24
 8b0:	70 95       	com	r23
 8b2:	61 95       	neg	r22
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	99 23       	and	r25, r25
 8bc:	a9 f0       	breq	.+42     	; 0x8e8 <__floatsisf+0x40>
 8be:	f9 2f       	mov	r31, r25
 8c0:	96 e9       	ldi	r25, 0x96	; 150
 8c2:	bb 27       	eor	r27, r27
 8c4:	93 95       	inc	r25
 8c6:	f6 95       	lsr	r31
 8c8:	87 95       	ror	r24
 8ca:	77 95       	ror	r23
 8cc:	67 95       	ror	r22
 8ce:	b7 95       	ror	r27
 8d0:	f1 11       	cpse	r31, r1
 8d2:	f8 cf       	rjmp	.-16     	; 0x8c4 <__floatsisf+0x1c>
 8d4:	fa f4       	brpl	.+62     	; 0x914 <__stack+0x15>
 8d6:	bb 0f       	add	r27, r27
 8d8:	11 f4       	brne	.+4      	; 0x8de <__floatsisf+0x36>
 8da:	60 ff       	sbrs	r22, 0
 8dc:	1b c0       	rjmp	.+54     	; 0x914 <__stack+0x15>
 8de:	6f 5f       	subi	r22, 0xFF	; 255
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	8f 4f       	sbci	r24, 0xFF	; 255
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	16 c0       	rjmp	.+44     	; 0x914 <__stack+0x15>
 8e8:	88 23       	and	r24, r24
 8ea:	11 f0       	breq	.+4      	; 0x8f0 <__floatsisf+0x48>
 8ec:	96 e9       	ldi	r25, 0x96	; 150
 8ee:	11 c0       	rjmp	.+34     	; 0x912 <__stack+0x13>
 8f0:	77 23       	and	r23, r23
 8f2:	21 f0       	breq	.+8      	; 0x8fc <__floatsisf+0x54>
 8f4:	9e e8       	ldi	r25, 0x8E	; 142
 8f6:	87 2f       	mov	r24, r23
 8f8:	76 2f       	mov	r23, r22
 8fa:	05 c0       	rjmp	.+10     	; 0x906 <__stack+0x7>
 8fc:	66 23       	and	r22, r22
 8fe:	71 f0       	breq	.+28     	; 0x91c <__stack+0x1d>
 900:	96 e8       	ldi	r25, 0x86	; 134
 902:	86 2f       	mov	r24, r22
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	2a f0       	brmi	.+10     	; 0x914 <__stack+0x15>
 90a:	9a 95       	dec	r25
 90c:	66 0f       	add	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	da f7       	brpl	.-10     	; 0x90a <__stack+0xb>
 914:	88 0f       	add	r24, r24
 916:	96 95       	lsr	r25
 918:	87 95       	ror	r24
 91a:	97 f9       	bld	r25, 7
 91c:	08 95       	ret

0000091e <__fp_split3>:
 91e:	57 fd       	sbrc	r21, 7
 920:	90 58       	subi	r25, 0x80	; 128
 922:	44 0f       	add	r20, r20
 924:	55 1f       	adc	r21, r21
 926:	59 f0       	breq	.+22     	; 0x93e <__fp_splitA+0x10>
 928:	5f 3f       	cpi	r21, 0xFF	; 255
 92a:	71 f0       	breq	.+28     	; 0x948 <__fp_splitA+0x1a>
 92c:	47 95       	ror	r20

0000092e <__fp_splitA>:
 92e:	88 0f       	add	r24, r24
 930:	97 fb       	bst	r25, 7
 932:	99 1f       	adc	r25, r25
 934:	61 f0       	breq	.+24     	; 0x94e <__fp_splitA+0x20>
 936:	9f 3f       	cpi	r25, 0xFF	; 255
 938:	79 f0       	breq	.+30     	; 0x958 <__fp_splitA+0x2a>
 93a:	87 95       	ror	r24
 93c:	08 95       	ret
 93e:	12 16       	cp	r1, r18
 940:	13 06       	cpc	r1, r19
 942:	14 06       	cpc	r1, r20
 944:	55 1f       	adc	r21, r21
 946:	f2 cf       	rjmp	.-28     	; 0x92c <__fp_split3+0xe>
 948:	46 95       	lsr	r20
 94a:	f1 df       	rcall	.-30     	; 0x92e <__fp_splitA>
 94c:	08 c0       	rjmp	.+16     	; 0x95e <__fp_splitA+0x30>
 94e:	16 16       	cp	r1, r22
 950:	17 06       	cpc	r1, r23
 952:	18 06       	cpc	r1, r24
 954:	99 1f       	adc	r25, r25
 956:	f1 cf       	rjmp	.-30     	; 0x93a <__fp_splitA+0xc>
 958:	86 95       	lsr	r24
 95a:	71 05       	cpc	r23, r1
 95c:	61 05       	cpc	r22, r1
 95e:	08 94       	sec
 960:	08 95       	ret

00000962 <__fp_zero>:
 962:	e8 94       	clt

00000964 <__fp_szero>:
 964:	bb 27       	eor	r27, r27
 966:	66 27       	eor	r22, r22
 968:	77 27       	eor	r23, r23
 96a:	cb 01       	movw	r24, r22
 96c:	97 f9       	bld	r25, 7
 96e:	08 95       	ret

00000970 <__mulsf3>:
 970:	0e 94 cb 04 	call	0x996	; 0x996 <__mulsf3x>
 974:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__fp_round>
 978:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscA>
 97c:	38 f0       	brcs	.+14     	; 0x98c <__mulsf3+0x1c>
 97e:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_pscB>
 982:	20 f0       	brcs	.+8      	; 0x98c <__mulsf3+0x1c>
 984:	95 23       	and	r25, r21
 986:	11 f0       	breq	.+4      	; 0x98c <__mulsf3+0x1c>
 988:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_inf>
 98c:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__fp_nan>
 990:	11 24       	eor	r1, r1
 992:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_szero>

00000996 <__mulsf3x>:
 996:	0e 94 8f 04 	call	0x91e	; 0x91e <__fp_split3>
 99a:	70 f3       	brcs	.-36     	; 0x978 <__mulsf3+0x8>

0000099c <__mulsf3_pse>:
 99c:	95 9f       	mul	r25, r21
 99e:	c1 f3       	breq	.-16     	; 0x990 <__mulsf3+0x20>
 9a0:	95 0f       	add	r25, r21
 9a2:	50 e0       	ldi	r21, 0x00	; 0
 9a4:	55 1f       	adc	r21, r21
 9a6:	62 9f       	mul	r22, r18
 9a8:	f0 01       	movw	r30, r0
 9aa:	72 9f       	mul	r23, r18
 9ac:	bb 27       	eor	r27, r27
 9ae:	f0 0d       	add	r31, r0
 9b0:	b1 1d       	adc	r27, r1
 9b2:	63 9f       	mul	r22, r19
 9b4:	aa 27       	eor	r26, r26
 9b6:	f0 0d       	add	r31, r0
 9b8:	b1 1d       	adc	r27, r1
 9ba:	aa 1f       	adc	r26, r26
 9bc:	64 9f       	mul	r22, r20
 9be:	66 27       	eor	r22, r22
 9c0:	b0 0d       	add	r27, r0
 9c2:	a1 1d       	adc	r26, r1
 9c4:	66 1f       	adc	r22, r22
 9c6:	82 9f       	mul	r24, r18
 9c8:	22 27       	eor	r18, r18
 9ca:	b0 0d       	add	r27, r0
 9cc:	a1 1d       	adc	r26, r1
 9ce:	62 1f       	adc	r22, r18
 9d0:	73 9f       	mul	r23, r19
 9d2:	b0 0d       	add	r27, r0
 9d4:	a1 1d       	adc	r26, r1
 9d6:	62 1f       	adc	r22, r18
 9d8:	83 9f       	mul	r24, r19
 9da:	a0 0d       	add	r26, r0
 9dc:	61 1d       	adc	r22, r1
 9de:	22 1f       	adc	r18, r18
 9e0:	74 9f       	mul	r23, r20
 9e2:	33 27       	eor	r19, r19
 9e4:	a0 0d       	add	r26, r0
 9e6:	61 1d       	adc	r22, r1
 9e8:	23 1f       	adc	r18, r19
 9ea:	84 9f       	mul	r24, r20
 9ec:	60 0d       	add	r22, r0
 9ee:	21 1d       	adc	r18, r1
 9f0:	82 2f       	mov	r24, r18
 9f2:	76 2f       	mov	r23, r22
 9f4:	6a 2f       	mov	r22, r26
 9f6:	11 24       	eor	r1, r1
 9f8:	9f 57       	subi	r25, 0x7F	; 127
 9fa:	50 40       	sbci	r21, 0x00	; 0
 9fc:	9a f0       	brmi	.+38     	; 0xa24 <__mulsf3_pse+0x88>
 9fe:	f1 f0       	breq	.+60     	; 0xa3c <__mulsf3_pse+0xa0>
 a00:	88 23       	and	r24, r24
 a02:	4a f0       	brmi	.+18     	; 0xa16 <__mulsf3_pse+0x7a>
 a04:	ee 0f       	add	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	bb 1f       	adc	r27, r27
 a0a:	66 1f       	adc	r22, r22
 a0c:	77 1f       	adc	r23, r23
 a0e:	88 1f       	adc	r24, r24
 a10:	91 50       	subi	r25, 0x01	; 1
 a12:	50 40       	sbci	r21, 0x00	; 0
 a14:	a9 f7       	brne	.-22     	; 0xa00 <__mulsf3_pse+0x64>
 a16:	9e 3f       	cpi	r25, 0xFE	; 254
 a18:	51 05       	cpc	r21, r1
 a1a:	80 f0       	brcs	.+32     	; 0xa3c <__mulsf3_pse+0xa0>
 a1c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_inf>
 a20:	0c 94 b2 04 	jmp	0x964	; 0x964 <__fp_szero>
 a24:	5f 3f       	cpi	r21, 0xFF	; 255
 a26:	e4 f3       	brlt	.-8      	; 0xa20 <__mulsf3_pse+0x84>
 a28:	98 3e       	cpi	r25, 0xE8	; 232
 a2a:	d4 f3       	brlt	.-12     	; 0xa20 <__mulsf3_pse+0x84>
 a2c:	86 95       	lsr	r24
 a2e:	77 95       	ror	r23
 a30:	67 95       	ror	r22
 a32:	b7 95       	ror	r27
 a34:	f7 95       	ror	r31
 a36:	e7 95       	ror	r30
 a38:	9f 5f       	subi	r25, 0xFF	; 255
 a3a:	c1 f7       	brne	.-16     	; 0xa2c <__mulsf3_pse+0x90>
 a3c:	fe 2b       	or	r31, r30
 a3e:	88 0f       	add	r24, r24
 a40:	91 1d       	adc	r25, r1
 a42:	96 95       	lsr	r25
 a44:	87 95       	ror	r24
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret

00000a4a <__fp_inf>:
 a4a:	97 f9       	bld	r25, 7
 a4c:	9f 67       	ori	r25, 0x7F	; 127
 a4e:	80 e8       	ldi	r24, 0x80	; 128
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	60 e0       	ldi	r22, 0x00	; 0
 a54:	08 95       	ret

00000a56 <__fp_nan>:
 a56:	9f ef       	ldi	r25, 0xFF	; 255
 a58:	80 ec       	ldi	r24, 0xC0	; 192
 a5a:	08 95       	ret

00000a5c <__fp_pscA>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	16 16       	cp	r1, r22
 a62:	17 06       	cpc	r1, r23
 a64:	18 06       	cpc	r1, r24
 a66:	09 06       	cpc	r0, r25
 a68:	08 95       	ret

00000a6a <__fp_pscB>:
 a6a:	00 24       	eor	r0, r0
 a6c:	0a 94       	dec	r0
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	05 06       	cpc	r0, r21
 a76:	08 95       	ret

00000a78 <__fp_round>:
 a78:	09 2e       	mov	r0, r25
 a7a:	03 94       	inc	r0
 a7c:	00 0c       	add	r0, r0
 a7e:	11 f4       	brne	.+4      	; 0xa84 <__fp_round+0xc>
 a80:	88 23       	and	r24, r24
 a82:	52 f0       	brmi	.+20     	; 0xa98 <__fp_round+0x20>
 a84:	bb 0f       	add	r27, r27
 a86:	40 f4       	brcc	.+16     	; 0xa98 <__fp_round+0x20>
 a88:	bf 2b       	or	r27, r31
 a8a:	11 f4       	brne	.+4      	; 0xa90 <__fp_round+0x18>
 a8c:	60 ff       	sbrs	r22, 0
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__fp_round+0x20>
 a90:	6f 5f       	subi	r22, 0xFF	; 255
 a92:	7f 4f       	sbci	r23, 0xFF	; 255
 a94:	8f 4f       	sbci	r24, 0xFF	; 255
 a96:	9f 4f       	sbci	r25, 0xFF	; 255
 a98:	08 95       	ret

00000a9a <_exit>:
 a9a:	f8 94       	cli

00000a9c <__stop_program>:
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <__stop_program>

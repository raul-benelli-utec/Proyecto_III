
pryecto_III_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  0080012c  0080012c  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e96  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d1  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070a  00000000  00000000  00001b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069b  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000810  00000000  00000000  00002bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000033db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 eb       	ldi	r30, 0xB0	; 176
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 39       	cpi	r26, 0x91	; 145
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  9e:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Obj_on>:
		posicion--;
	}
}
void abrir(){
	if(posicion<posicion_minima+rango_trabajo){
		posicion++;
  a6:	08 95       	ret

000000a8 <Obj_fail>:
  a8:	08 95       	ret

000000aa <Obj_off>:
  aa:	08 95       	ret

000000ac <Obj_mov>:
  ac:	08 95       	ret

000000ae <Obj_cath>:
  ae:	08 95       	ret

000000b0 <Obj_released>:
  b0:	08 95       	ret

000000b2 <Efect_on>:
  b2:	08 95       	ret

000000b4 <Efect_restart>:
  b4:	08 95       	ret

000000b6 <Brazo_mov>:
  b6:	08 95       	ret

000000b8 <USART_Init>:
  b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c0:	88 e9       	ldi	r24, 0x98	; 152
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  c6:	e2 ec       	ldi	r30, 0xC2	; 194
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	86 60       	ori	r24, 0x06	; 6
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <configuracion_inicial>:
  d2:	87 e6       	ldi	r24, 0x67	; 103
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Init>
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	80 63       	ori	r24, 0x30	; 48
  de:	84 b9       	out	0x04, r24	; 4
  e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <posicion>
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	8f 7b       	andi	r24, 0xBF	; 191
  ec:	8a b9       	out	0x0a, r24	; 10
  ee:	14 bc       	out	0x24, r1	; 36
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	85 bd       	out	0x25, r24	; 37
  f4:	8a e3       	ldi	r24, 0x3A	; 58
  f6:	86 bd       	out	0x26, r24	; 38
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  fe:	08 95       	ret

00000100 <configuracion_msg>:
 100:	e7 e4       	ldi	r30, 0x47	; 71
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	86 e2       	ldi	r24, 0x26	; 38
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	91 83       	std	Z+1, r25	; 0x01
 10a:	80 83       	st	Z, r24
 10c:	81 e2       	ldi	r24, 0x21	; 33
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	93 83       	std	Z+3, r25	; 0x03
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	8c e1       	ldi	r24, 0x1C	; 28
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	95 83       	std	Z+5, r25	; 0x05
 11a:	84 83       	std	Z+4, r24	; 0x04
 11c:	83 e1       	ldi	r24, 0x13	; 19
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	97 83       	std	Z+7, r25	; 0x07
 122:	86 83       	std	Z+6, r24	; 0x06
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	91 87       	std	Z+9, r25	; 0x09
 12a:	80 87       	std	Z+8, r24	; 0x08
 12c:	89 e0       	ldi	r24, 0x09	; 9
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	93 87       	std	Z+11, r25	; 0x0b
 132:	82 87       	std	Z+10, r24	; 0x0a
 134:	08 95       	ret

00000136 <main>:
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	64 97       	sbiw	r28, 0x14	; 20
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
 14a:	83 e5       	ldi	r24, 0x53	; 83
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	84 e5       	ldi	r24, 0x54	; 84
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	9c 83       	std	Y+4, r25	; 0x04
 158:	8b 83       	std	Y+3, r24	; 0x03
 15a:	85 e5       	ldi	r24, 0x55	; 85
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	9e 83       	std	Y+6, r25	; 0x06
 160:	8d 83       	std	Y+5, r24	; 0x05
 162:	86 e5       	ldi	r24, 0x56	; 86
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	98 87       	std	Y+8, r25	; 0x08
 168:	8f 83       	std	Y+7, r24	; 0x07
 16a:	87 e5       	ldi	r24, 0x57	; 87
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	9a 87       	std	Y+10, r25	; 0x0a
 170:	89 87       	std	Y+9, r24	; 0x09
 172:	88 e5       	ldi	r24, 0x58	; 88
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	9c 87       	std	Y+12, r25	; 0x0c
 178:	8b 87       	std	Y+11, r24	; 0x0b
 17a:	89 e5       	ldi	r24, 0x59	; 89
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	9e 87       	std	Y+14, r25	; 0x0e
 180:	8d 87       	std	Y+13, r24	; 0x0d
 182:	8a e5       	ldi	r24, 0x5A	; 90
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	9a 8b       	std	Y+18, r25	; 0x12
 188:	89 8b       	std	Y+17, r24	; 0x11
 18a:	8b e5       	ldi	r24, 0x5B	; 91
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	9c 8b       	std	Y+20, r25	; 0x14
 190:	8b 8b       	std	Y+19, r24	; 0x13
 192:	0e 94 69 00 	call	0xd2	; 0xd2 <configuracion_inicial>
 196:	0e 94 80 00 	call	0x100	; 0x100 <configuracion_msg>
 19a:	78 94       	sei
 19c:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <estado_actual>
 1a0:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <estado_actual+0x1>
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	8c 0f       	add	r24, r28
 1ae:	9d 1f       	adc	r25, r29
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	01 90       	ld	r0, Z+
 1b6:	f0 81       	ld	r31, Z
 1b8:	e0 2d       	mov	r30, r0
 1ba:	09 95       	icall
 1bc:	ef cf       	rjmp	.-34     	; 0x19c <main+0x66>

000001be <USART_Receive>:
 1be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c2:	88 23       	and	r24, r24
 1c4:	e4 f7       	brge	.-8      	; 0x1be <USART_Receive>
 1c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1ca:	08 95       	ret

000001cc <__vector_18>:
	}
}
//interrupciones
ISR (USART_RX_vect)
{
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	received_data = USART_Receive();
 1ee:	0e 94 df 00 	call	0x1be	; 0x1be <USART_Receive>
 1f2:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <received_data>
	if(received_data!='\n' && received_data!='\r'){
 1f6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <received_data>
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	89 f0       	breq	.+34     	; 0x220 <__vector_18+0x54>
 1fe:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <received_data>
 202:	8d 30       	cpi	r24, 0x0D	; 13
 204:	69 f0       	breq	.+26     	; 0x220 <__vector_18+0x54>
		str[i]=received_data;
 206:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 20a:	e8 2f       	mov	r30, r24
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <received_data>
 212:	ed 5a       	subi	r30, 0xAD	; 173
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	90 83       	st	Z, r25
		i++;
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 21e:	0e c0       	rjmp	.+28     	; 0x23c <__vector_18+0x70>
		}else{
		str[i]='\0';
 220:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end>
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ed 5a       	subi	r30, 0xAD	; 173
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	10 82       	st	Z, r1
		i=0;
 22c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
		flag = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <flag+0x1>
 238:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <flag>
	}
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <__vector_16>:
ISR (TIMER0_OVF_vect)
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	8f 93       	push	r24
 26a:	9f 93       	push	r25
	TCNT0=0b00111010;//100 us
 26c:	8a e3       	ldi	r24, 0x3A	; 58
 26e:	86 bd       	out	0x26, r24	; 38
	
	if(contador>posicion){
 270:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <contador>
 274:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <posicion>
 278:	89 17       	cp	r24, r25
 27a:	20 f4       	brcc	.+8      	; 0x284 <__vector_16+0x26>
		PORTB=PORTB &~(1<<pwm_servo);
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	8f 7b       	andi	r24, 0xBF	; 191
 280:	85 b9       	out	0x05, r24	; 5
 282:	03 c0       	rjmp	.+6      	; 0x28a <__vector_16+0x2c>
		}else{
		PORTB=PORTB |(1<<pwm_servo);
 284:	85 b1       	in	r24, 0x05	; 5
 286:	80 64       	ori	r24, 0x40	; 64
 288:	85 b9       	out	0x05, r24	; 5
	}
	contador++;
 28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <contador>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contador>
	if(contador>=200){
 294:	88 3c       	cpi	r24, 0xC8	; 200
 296:	18 f0       	brcs	.+6      	; 0x29e <__vector_16+0x40>
		contador=1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <contador>
	};

}
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
